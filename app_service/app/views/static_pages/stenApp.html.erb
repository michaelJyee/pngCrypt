<% provide(:title, 'StenApp') %>
<style type="text/css">
    .sk-folding-cube {
    margin: 20px auto;
    width: 120px;
    height: 120px;
    position: relative;
    -webkit-transform: rotateZ(45deg);
            transform: rotateZ(45deg);
    }

    .sk-folding-cube .sk-cube {
      float: left;
      width: 50%;
      height: 50%;
      position: relative;
      -webkit-transform: scale(1.1);
          -ms-transform: scale(1.1);
              transform: scale(1.1); 
    }
    .sk-folding-cube .sk-cube:before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #333;
      -webkit-animation: sk-foldCubeAngle 2.4s infinite linear both;
              animation: sk-foldCubeAngle 2.4s infinite linear both;
      -webkit-transform-origin: 100% 100%;
          -ms-transform-origin: 100% 100%;
              transform-origin: 100% 100%;
    }
    .sk-folding-cube .sk-cube2 {
      -webkit-transform: scale(1.1) rotateZ(90deg);
              transform: scale(1.1) rotateZ(90deg);
    }
    .sk-folding-cube .sk-cube3 {
      -webkit-transform: scale(1.1) rotateZ(180deg);
              transform: scale(1.1) rotateZ(180deg);
    }
    .sk-folding-cube .sk-cube4 {
      -webkit-transform: scale(1.1) rotateZ(270deg);
              transform: scale(1.1) rotateZ(270deg);
    }
    .sk-folding-cube .sk-cube2:before {
      -webkit-animation-delay: 0.3s;
              animation-delay: 0.3s;
    }
    .sk-folding-cube .sk-cube3:before {
      -webkit-animation-delay: 0.6s;
              animation-delay: 0.6s; 
    }
    .sk-folding-cube .sk-cube4:before {
      -webkit-animation-delay: 0.9s;
              animation-delay: 0.9s;
    }
    @-webkit-keyframes sk-foldCubeAngle {
      0%, 10% {
        -webkit-transform: perspective(220px) rotateX(-180deg);
                transform: perspective(220px) rotateX(-180deg);
        opacity: 0; 
      } 25%, 75% {
        -webkit-transform: perspective(220px) rotateX(0deg);
                transform: perspective(220px) rotateX(0deg);
        opacity: 1; 
      } 90%, 100% {
        -webkit-transform: perspective(220px) rotateY(180deg);
                transform: perspective(220px) rotateY(180deg);
        opacity: 0; 
      } 
    }

    @keyframes sk-foldCubeAngle {
      0%, 10% {
        -webkit-transform: perspective(250px) rotateX(-180deg);
                transform: perspective(250px) rotateX(-180deg);
        opacity: 0; 
      } 25%, 75% {
        -webkit-transform: perspective(250px) rotateX(0deg);
                transform: perspective(250px) rotateX(0deg);
        opacity: 1; 
      } 90%, 100% {
        -webkit-transform: perspective(250px) rotateY(180deg);
                transform: perspective(250px) rotateY(180deg);
        opacity: 0; 
      }
    }

    .mesageSection {
      background: #DCDCDC;
      border-radius: 5px;
      width: 100%;
      height: auto;
      min-height: 40px;
      padding: 10px;
    }

    .crypt-button{
      text-align:center;
      width:150px;
      height:30px;
      line-height:30px;
      background-color:#00ced1;
      cursor:pointer;
    }

    .crypt-button: hover{
      background-color: #008284;
    }


    .fade-element-in.ng-enter {
      transition: 0.3s linear all;
      opacity: 0;
    }

    .fade-element-in-init .fade-element-in.ng-enter {
      opacity: 1;
    }

    .fade-element-in.ng-enter.ng-enter-active {
      opacity: 1;
    }

    .fade-element-in.ng-leave {
      transition: 0.3s linear all;
      opacity: 1;
    }
    .fade-element-in.ng-leave.ng-leave-active {
      opacity: 0;
    }
</style>
<div class="row">
  <div class="col-md-6 col-md-offset-3">
    <% if logged_in? %>
      <h1>PNG/Crypt</h1>
      <div class="sk-folding-cube" style="position: absolute; left: 50%; margin-left: -60px">
        <div class="sk-cube1 sk-cube"></div>
        <div class="sk-cube2 sk-cube"></div>
        <div class="sk-cube4 sk-cube"></div>
        <div class="sk-cube3 sk-cube"></div>
      </div>

      <div ng-app="myApp" ng-controller="myCtrl">
        <form id="test-form">
          <div style="display: inline-block; width:100px">
            <input type="radio" ng-model="d.type" id="encrypt" name="type" value="encrypt" checked />
            <label for="encrypt">Encrypt</label>
          </div>

          <div style="display: inline-block; width:100px">
            <input type="radio" ng-model="d.type" id="decrypt" name="type" value="decrypt" />
            <label for="decrypt">Decrypt</label>
          </div>

          <br>
          <br>

          <label>Image:</label>
          <input type="file" name="pic" accept="image/*" onchange="clicked()">

          <div class="fade-element-in" ng-if="d.type === 'encrypt'">
            <label>Message:</label>
            <input type="text" name="message">
          </div>

          <div class="fade-element-in" ng-if="data.decryptedMessage">
            <strong>Private Message</strong>
            <div class="mesageSection" ng-bind="data.decryptedMessage">
            </div>
            <br>
          </div>


          <div class="crypt-button" ng-click="crypt()">GO!</div>
          <%= hidden_field_tag :authenticity_token, form_authenticity_token -%>
        </form>
      </div>

      <script>
        $('.sk-folding-cube').hide();
        var a = document.createElement("a");
        document.body.appendChild(a);
        a.style = "display: none";

        var secretMessage = document.createElement("p");
        document.body.appendChild(secretMessage);

        var formData = new FormData(document.getElementById('test-form'));

        function getCryptUrl(type){
          var AUTH_TOKEN = $('meta[name=csrf-token]').attr('content');
          if(type === "encrypt"){
            return "/crypt/encrypt?&authenticity_token=" + AUTH_TOKEN;
          }
          else if(type === "decrypt"){
            return "/crypt/decrypt?&authenticity_token=" + AUTH_TOKEN;
          }
          return;
        }

        function base64ToDownload(data){
          fetch(data)
          .then(res => res.blob())
          .then(blob => {
            url = window.URL.createObjectURL(blob);
            a.href = url;
            a.download = "encrypted.png";
            a.click();
            window.URL.revokeObjectURL(url);
          });
        }

        function clicked(){
          var file = document.querySelector('form input[type="file"]').files[0];
          if(!file) return
          getBase64(file).then(
            data => {
              console.log("data=>",data);
              formData.append("imgData",data);
            }
          );
        }

        function getBase64(file) {
          return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => resolve(reader.result);
            reader.onerror = error => reject(error);
          });
        }
      </script>

      <script>
        var app = angular.module('myApp', ['ngAnimate']);
        app.controller('myCtrl', function($scope,$http) {
          var that = $scope;
          $scope.d = {};
          $scope.data = {};

          $scope.crypt = function(){
            $('.sk-folding-cube').show();
            var msg = $( 'input[name="message"]' ).val();
            var type = $('input[name="type"]:checked').val();
            var url = getCryptUrl(type);

            var data = {
              imgB64: formData.get("imgData"),
              type: type,
              msg: msg
            }

            $http.post(url, data)
            .then(function(response){
              $('.sk-folding-cube').hide();
              if(type === "encrypt" && response.data.poop){
                var data = `data:image/png;base64,${response.data.poop}`;
                base64ToDownload(data);
              }
              else if(type === "decrypt" && response.data.decryptedMessage){
                that.data.decryptedMessage = response.data.decryptedMessage;
              }
            });
          }
        });
      </script>

      <%= form_tag do %>        
      <% end %>
    <% else %>
      <h1 style="color: red;"> You must be logged in to use this service!</h1>
    <% end %>
  </div>
</div>